@using Final_Backend_Project.ViewModelsUI
@using Domain.Enum
@model ShopVM
@{
    var sort = Model.Sort;
}
<main class="shop">
    <section id="shop-product">
        <div class="shop-product-submenu hidden">
            <div class="submenu-head">
                <h2>Filter and sort</h2>
                <p><span>8</span> of <span>12</span> products</p>
                <button onclick="hiddenbtn()"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="submenu-body">
                <div class="accordion" id="accordionExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header ">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Price
                            </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse ">
                            <div class="accordion-body price-accordion">
                                <div class="price-filter-input">
                                    <label for="priceFrom">From</label>
                                    <input type="number" id="priceFrom" min="0" step="0.01" />
                                </div>
                                <div class="price-filter-divider">
                                    <span>-</span>
                                </div>
                                <div class="price-filter-input">
                                    <label for="priceTo">To</label>
                                    <input type="number" id="priceTo" min="0" step="0.01" />
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                Category
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse">
                            <div class="accordion-body">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="submenu-sort-menu">
                    <label>Sort by:</label>


                    <div class="filter__sort">
                        <span>Sort By</span>
                   

                    </div>



                </div>

            </div>
            <div class="submenu-footer">
                <button class="remove-all-btn">Remove all</button>
                <button class="applay">Applay</button>
            </div>
        </div>
        <div class="container-xl">
            <div class="row">
                <div class="col-12">
                    <div class="row">
                        <div class="col-12 d-flex mb-3">
                            <div class="shop-product-item-filter">
                                <button onclick="showbtn()"><i class="bi bi-sliders"></i> Filter and sort</button>
                            </div>
                            <div class="shop-product-shorter">
                                <label>Sort by:</label>

                                <form asp-action="index" method="get" id="sortForm">
                                    <select class="form-select"
                                            name="sort"
                                            onchange="document.getElementById('sortForm').submit()"
                                            style="appearance: none; border: none; outline: none; padding: 5px; background: transparent; color: inherit; font-size: inherit; text-align: center; border-radius: 0px; cursor: pointer;">
                                                                    
                                        @if (sort == "az")
                                        {
                                            <option value="az" selected>A-Z</option>
                                        }
                                        else
                                        {
                                            <option value="az">A-Z</option>
                                        }

                                        @if (sort == "za")
                                        {
                                            <option value="za" selected>Z-A</option>
                                        }
                                        else
                                        {
                                            <option value="za">Z-A</option>
                                        }

                                        @if (sort == "priceHighLow")
                                        {
                                            <option value="priceHighLow" selected>Price, High to Low</option>
                                        }
                                        else
                                        {
                                            <option value="priceHighLow">Price, High to Low</option>
                                        }

                                        @if (sort == "priceLowHigh")
                                        {
                                            <option value="priceLowHigh" selected>Price, Low to High</option>
                                        }
                                        else
                                        {
                                            <option value="priceLowHigh">Price, Low to High</option>
                                        }

                                    </select>

                                    <input type="hidden" name="search" value="@Model.Search" />
                                    <input type="hidden" name="PriceFrom" value="@Model.PriceFrom" />
                                    <input type="hidden" name="PriceTo" value="@Model.PriceTo" />
                                    <input type="hidden" name="categoryId" value="@Model.CategoryIds" />
                                    <input type="hidden" name="page" value="1" />

                                </form>

                            </div>
                        </div>
                        <div class="col-12 d-flex">
                            <form method="get" asp-controller="Shop" asp-action="Index" class="mb-4">
                                <div class="border p-3 rounded">
                                    <h5 class="mb-3">Filter</h5>

                                    <!-- Multi-Category -->
                                    <div class="mb-3">
                                        <label class="d-block">Price Range</label>
                                        <div class="d-flex gap-2">
                                            <input type="number" name="priceFrom" class="form-control" placeholder="Min" value="@Model.PriceFrom" />
                                            <input type="number" name="priceTo" class="form-control" placeholder="Max" value="@Model.PriceTo" />
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="d-block">Categories</label>
                                        @foreach (var cat in Model.Categories)
                                        {
                                            <div>
                                                <input class="form-check-input" type="checkbox"
                                                       name="categoryIds"
                                                       value="@cat.Id"
                                                       id="cat_@cat.Id"
                                                @(Model.CategoryIds != null && Model.CategoryIds.Contains(cat.Id) ? "checked" : "") />
                                                <label class="form-check-label" for="cat_@cat.Id">
                                                    @cat.Name
                                                </label>
                                            </div>
                                        }

                                    </div>    <input type="hidden" name="sort" value="@Model.Sort" />
                                    <input type="hidden" name="search" value="@Model.Search" />
                                    <input type="hidden" name="page" value="1" />
                                    <!-- Price Range -->
                                    <button type="submit" class="btn btn-primary" style="background-color : purple">Apply</button>
                                    <a href="/Shop/Index" class="btn btn-outline-secondary">Reset</a>
                                </div>
                            </form>


                            <div class="shop-product-items">
                                <div class="container-xl">
                                    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-3 g-4">

                                            @foreach (var product in Model.Products.Datas)
                                            {
                                                <div class="col">
                                                    <div class="card">
                                                        <a asp-action="detail" asp-controller="shop" asp-route-id="@product.Id"><img src="@product.ImageUrl" class="card-img-top" alt="..."></a>

                                                        <div class="cart-shortcut">
                                                            <ul>
                                                                <li>
                                                                    <button class="add-to-wishlist" data-product-id="@product.Id">
                                                                        <i class="bi bi-heart"></i>
                                                                    </button>
                                                                </li>
                                                                <li>
                                                                    <button><i class="bi bi-eye"></i></button>
                                                                </li>
                                                                <li>
                                                                    <button class="add-to-basket" data-product-id="@product.Id">
                                                                        <i class="bi bi-basket2-fill"></i>
                                                                    </button>
                                                                </li>
                                                            </ul>
                                                        </div>

                                                        <div class="card-body">

                                                            <h5 class="card-title">@product.Name</h5>
                                                            <p class="card-text">@product.Price</p>
                                                        </div>
                                                    </div>
                                                </div>


                                            }

                                    </div>
                                    <div class="col-12">
                                        <div class="shop-pagination">
                                            <div aria-label="Page navigation">
                                                <ul class="pagination custom-pagination">
                                                    @* Previous Button *@
                                                    <li class="page-item @(Model.Products.HasPrevious ? "" : "disabled")">
                                                        <a class="page-link" href="@Url.Action("Index", new {
                    page = Model.Products.CurrentPage - 1,
                    search = Model.Search,
                    sort = Model.Sort,
                    priceFrom = Model.PriceFrom,
                    priceTo = Model.PriceTo,
                    categoryIds = Model.CategoryIds
                })">Prev</a>
                                                    </li>

                                                    @* Page Numbers *@
                                                    @for (int i = 1; i <= Model.Products.TotalPage; i++)
                                                    {
                                                        <li class="page-item @(i == Model.Products.CurrentPage ? "active" : "")">
                                                            <a class="page-link" href="@Url.Action("Index", new {
                        page = i,
                        search = Model.Search,
                        sort = Model.Sort,
                        priceFrom = Model.PriceFrom,
                        priceTo = Model.PriceTo,
                        categoryIds = Model.CategoryIds
                    })">@i</a>
                                                        </li>
                                                    }

                                                    @* Next Button *@
                                                    <li class="page-item @(Model.Products.HasNext ? "" : "disabled")">
                                                        <a class="page-link" href="@Url.Action("Index", new {
                    page = Model.Products.CurrentPage + 1,
                    search = Model.Search,
                    sort = Model.Sort,
                    priceFrom = Model.PriceFrom,
                    priceTo = Model.PriceTo,
                    categoryIds = Model.CategoryIds
                })">Next</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

</main>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const plusButtons = document.querySelectorAll("button[onclick^='addToBasket']");

        plusButtons.forEach(button => {
            button.addEventListener("click", function () {
                const span = button.parentElement.querySelector(".qty-display");
                if (span) {

                    const productId = this.dataset.productId;

                    fetch('/Basket/AddToBasket?id=' + productId, {
                        method: 'POST'
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                // Count və Total Price yenilənir
                                document.getElementById("basket-count").innerText = data.count;
                                updateProductUI(productId)
                            } else {
                                alert("Səbətə əlavə edilə bilmədi.");
                            }
                        })
                        .catch(err => console.error("Xəta:", err));
                    let count = parseInt(span.innerText.trim());
                    span.innerText = count + 1;


                }
            });


        });

    });

</script>



<script>

    function addToBasket(id) {
        event.preventDefault();
        fetch('/Basket/AddToBasket?id=' + id, {
            method: 'POST'
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    fetch('/Basket/GetCountAndTotal')
                        .then(res => res.json())
                        .then(data => {
                            document.getElementById("basket-count").innerText = data.count;
                            document.getElementById("basketViewTotal").innerText = data.total.toFixed(2) + " USD";
                            updateProductUI(id);
                        });
                } else {
                    console.log('Məhsul əlavə edilə bilmədi.');
                }
            });
    }

</script>


<script>

    document.addEventListener("DOMContentLoaded", function () {
        const wishlistButtons = document.querySelectorAll(".add-to-wishlist");

        wishlistButtons.forEach(button => {
            button.addEventListener("click", function () {
                const productId = this.dataset.productId;

                fetch('/Wishlist/AddToWishList?id=' + productId, {
                    method: 'POST'
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            fetch('/Wishlist/WishlistCount')
                                .then(res => res.json())
                                .then(data => {
                                    document.getElementById("wishlist-count").innerText = data.count;
                                });
                        } else {
                            alert("Məhsul əlavə edilə bilmədi.");
                        }
                    })
                    .catch(err => console.error("Xəta:", err));
            });
        });
    });


</script>

<script>





   




    document.addEventListener("DOMContentLoaded", function () {
        const basketButtons = document.querySelectorAll(".add-to-basket");

        basketButtons.forEach(button => {
            button.addEventListener("click", function () {
                const productId = this.dataset.productId;

                fetch('/Basket/AddToBasket?id=' + productId, {
                    method: 'POST'
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            // Count və Total Price yenilənir
                            document.getElementById("basket-count").innerText = data.count;
                        } else {
                            alert("Səbətə əlavə edilə bilmədi.");
                        }
                    })
                    .catch(err => console.error("Xəta:", err));
            });
        });
    });

</script>

<script>


    function RemoveToBasket(id) {
        fetch('/Basket/Deacrease?id=' + id, {
            method: 'POST'
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    // Backenddə 1 ədəd azaldı, indi UI-da dəyişiklik edək:
                    const countElement = document.getElementById(`product-count-${id}`);

                    if (!countElement) {
                        // Say elementi yoxdursa səhifəni yenilə
                        location.reload();
                        return;
                    }

                    // Cari sayı ədədi kimi götür
                    let count = parseInt(countElement.innerText);

                    // Backenddə azaltdıq, indi UI-da da 1 ədəd azaldırıq
                    count = count - 1;

                    if (count <= 0) {
                        // 0 və ya aşağı düşürsə, satırı sil
                        const row = document.getElementById(`product-row-${id}`);
                        if (row) row.remove();
                    } else {
                        // Sayı yenilə
                        countElement.innerText = count;

                        // Qiyməti yenilə (məsələn, unitPrice * count)
                        updateProductUI(id);
                    }

                    // Ümumi səbət məlumatlarını yenilə
                    fetch('/Basket/GetCountAndTotal')
                        .then(res => res.json())
                        .then(data2 => {
                            document.getElementById("basket-count").innerText = data2.count;
                            document.getElementById("basketViewTotal").innerText = data2.total.toFixed(2) + " $";
                            document.getElementById("basket-total").innerText = data2.total.toFixed(2) + " $";
                        });

                } else {
                    console.log('Məhsul azaldıla bilmədi.');
                }
            })
            .catch(err => console.error('Xəta baş verdi:', err));
    }

    function updateProductUI(id) {
        const countElement = document.getElementById(`product-count-${id}`);
        const priceElement = document.querySelector(`[data-product-id="${id}"][data-price]`);
        const totalElement = document.getElementById(`product-total-${id}`);

        if (!countElement || !priceElement || !totalElement) {
            console.warn("Element tapılmadı:", { countElement, priceElement, totalElement });
            return;
        }

        const count = parseInt(countElement.innerText);
        const price = parseFloat(priceElement.getAttribute("data-price"));
        const totalPrice = (count * price).toFixed(2);

        totalElement.innerText = `$${totalPrice}`;
    }

</script>